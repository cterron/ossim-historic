#!/usr/bin/perl
#
#
#
use v5.10;

use Config::Tiny;
#use DBI;
#use MIME::Base64;
#use Frontier::Daemon;
use Email::Valid;
use Config::IniFiles;


use lib '/usr/share/alienvault-center/lib';

use AV::Log;
#set_output_descriptors_to_dev_null();
#use avparseconf;
use Avrepository;


# Program version (DO NOT TOUCH THIS)
my $VER = "1.0 release 1";
my $web = "http://www.alienvault.com";
my $dataserver = "http://data.alienvault.com";
my $current_version_alienvault ;
my $current_version_local ;
my $cversion = q{};
my $csubversion = q{};
my $csubsubversion = q{};
my $program_name = 'alienvault-update';
my $DEBUGLOG = 0;
my $dbinary = "dialog";
my $profesional_version = 0;
my $profesional_version3 = 0;
my $profesional_version4 = 0;
my $free_version = 0;
my $free_version3 = 0;
my $free_version4 = 0;
my $percent = 0;
my $dialog_active = 1;
my $upgrade = 0;
my $flag = q{};
my $arch = `uname -m` ; $arch =~ s/\n//g;
my $tmppath = "/usr/share/ossim-installer/temp";
my $feed = 0;
#my $vpre = 0;
#my $vpost = 0;
my $wget_useragent = q{};
my $REL3=q{RELEASES};

#
# Error codes are defined in:
# alienvault-api/alienvault-api-scripts/api_core/lib/celerymethods/errors.py
# alienvault-ossim/ossim/www/av_center/data/sections/common/code_translation.php
#
my $ERROR_INSTANCE_RUNNING = 50;
my $ERROR_INVALID_SIGNATURE3 = 51;
my $ERROR_UNAVAILABLE_SIGNATURE3 = 52;
my $ERROR_INVALID_KEY = 53;
my $ERROR_INVALID_KEY_ALT = 54;
my $ERROR_INVALID_SIGNATURE4 = 55;
my $ERROR_UNAVAILABLE_SIGNATURE4 = 56;
my $ERROR_INVALID_SIGNATURE_FEED = 57;
my $ERROR_UNAVAILABLE_SIGNATURE_FEED = 58;
my $ERROR_HA_RUNNING = 59;
my $ERROR_CANT_DOWNLOAD_FEED_UPDATE = 63;
my $ERROR_NO_FREE_SPACE_ON_DISK = 70;

# function
sub main();             # main program body
sub parse_argv();       # requires defined %config
sub config_check();     # requires defined %configcolor;  # colours configuration
sub help();             # help(string: $helpCmd);
sub apt_status();
sub feed_update();
sub check_pro(); # Check free / pro and return licenses

#
# MAIN
#  

sub main() {

#    my $running_instance = `ps -fea | grep $program_name | grep -v grep | grep -v ps | wc -l`;
    my $running_instance = `ps -feaww | grep "/usr/bin/perl /usr/bin/$program_name" | grep -v grep | grep -v ps | wc -l`;
    chomp $running_instance;
    if ( $running_instance > 1 ) {
        console_log("$program_name is already running ... exiting");
        exit $ERROR_INSTANCE_RUNNING;
    }

    my $ha_not_running = system("cl_status rscstatus > /dev/null 2>&1") >> 8;
    if ( $ha_not_running == 0 ) {
        console_log("System running in HA mode. If you want to update your system, please stop the HA system by running alienvault-ha-assistant --stop, and then update.");
        exit $ERROR_HA_RUNNING;
    }

    console_log("Checking APT status");
    apt_status();

    my %sysconf = Avrepository::get_current_repository_info();

    #print $sysconf{'distro'};
    
    #my @response_msg = %sysconf;
    #$current_version_local = $response_msg[1];
    $current_version_local = $sysconf{'distro'};

    $cversion = $sysconf{'version'};
    $csubversion = $sysconf{'subversion'};
    $csubsubversion = $sysconf{'subsubversion'};

    # product(free/pro/demo).version.subversion.subsubversion 
    $wget_useragent = "ossim-wget-version";
    verbose_log ("User Agent set to $wget_useragent");

#   $vpre = get_current_oct_version();

    system("mkdir $tmppath") if (! -d "$tmppath");

    if ( $feed == 1 ) {
        my $status = feed_update();
        exit $status;
    }

    ## update
    console_log("Starting update");
    $flag = "-v" if ($VERBOSELOG == 1);
    my $script_name;
    my ($ispro, $lic) = check_pro();
    # Remove old repos
    #system("rm -f /etc/apt/sources.list.d/alienvault*.list");
    #build_free_repos();
    #build_pro_repos ($lic) if ($ispro);
    # Repos updates in script
    # Remove the old scripts
    my @scripts = ("alienvault5_update-script",
                    "alienvault5_update-script.sig");
    @oldfiles = map ("$tmppath/$_", @scripts);
    unlink @oldfiles;
    # Download fiels
    foreach my $script (@scripts)
    {
        verbose_log("Downloading $script to $tmppath/$script");
        system("wget -U $wget_useragent -O $tmppath/$script $dataserver/alienvault5/RELEASES/$script");
    }
    # Check signatures
    @checkfiles = ("alienvault5_update-script");
    foreach my $script (@checkfiles)
    {
        my $valid_sig = system("gpg --verify --keyring /etc/apt/trusted.gpg $tmppath/$script.sig");
        if ($valid_sig != 0)
        {
            say("Invalid signature for upgrade file $script");
            exit $ERROR_INVALID_SIGNATURE4;
        }

    }
    foreach my $script (@checkfiles)
    {
        verbose_log("Exec: $tmppath/$script");
        $flag_processed = ( $flag // q{} );
        my $code_result = system("/bin/bash $tmppath/$script $flag_processed");
        my $update_result = $code_result >> 8; 
        if ($update_result != 0) {
            console_log("There was an error updating the system");
            exit $update_result;
        }
                                    
    }
    console_log("Finished");

}

    #
    # END MAIN
    #

# Parse and check arguments
parse_argv();
if (config_check()) {
        main();
}else {
        error("Configuration check failed.");
}

sub parse_argv() {

        # no arguments?
        #if ($#ARGV == -1) {
#               print "use --help or -h\n"
        #}

        # scan command line arguments
        foreach (@ARGV) {
                my @parms = split(/=/);
                #my @parms = split(//);
                if (($parms[0] eq "--help") || ($parms[0] eq "-h")) { help(); }
                elsif (($parms[0] eq "--console-log") || ($parms[0] eq "-c")) {$CONSOLELOG = 1;}
                elsif (($parms[0] eq "--verbose") || ($parms[0] eq "-v")) {$VERBOSELOG = 1; $CONSOLELOG = 1; $dialog_active = 0;}
                elsif (($parms[0] eq "--debug") || ($parms[0] eq "-d")) {$DEBUGLOG = 1; $dialog_active = 0;}
                elsif (($parms[0] eq "--quiet") || ($parms[0] eq "-q")) {$dialog_active = 0;}
                elsif (($parms[0] eq "--encoded") || ($parms[0] eq "-e")) {$encoded = 1;}
                elsif (($parms[0] eq "--saqqara") || ($parms[0] eq "-s")) {$saqqara = 1;}
                elsif ($parms[0] eq "--feed") {$feed = 1;}
                elsif (($parms[0] eq "--add_vpnnode") || ($parms[0] eq "-avpn")) {
                        if ($parms[1] eq "") { error("ip needed (example: --add_vpnnode=192.168.1.100");}
                        $config{'add_vpnnode'} = "$parms[1]";
                        $dialog_active = 0;
                        }
        elsif ($parms[0] eq "--upgrade") {
            say 'The OSSIM upgrade tool is no longer supported. Please contact support@alienvault.com for more information.';
                        exit 1;
        }
                elsif ($parms[0] eq "-uc" ) {
            say 'The OSSIM upgrade tool is no longer supported. Please contact support@alienvault.com for more information.';
                        exit 1;
                        }
                elsif (($parms[0] eq "--release") || ($parms[0] eq "-r")) {
                        if ($parms[1] eq "") { error("branch needed (example: --release=rc4.2.2");}
                        $config{'release'} = "$parms[1]";
            $REL3=qq{RELEASES_$config{'release'}};
                        $dialog_active = 0;
                        }
                else {
                        error("Unknown argument $_ from command line.");
                }

                undef @parms;
        }
}

sub config_check() {

    # Checks configuration validity
        my $noerror = 1;


        if ( $CONSOLELOG == 1 || $DEBUGLOG == 1 || $VERBOSELOG == 1 ) {
                console_log("Console log mode on");
                $dialog_active = 0;
        }

        if ((exists $config{'add_sensor'}) && (! exists $config{'add_sensor_name'})) {
                error("Please specify the name of the Sensor");
                $noerror = 1;
        }

        return $noerror;
}

sub help(){
print <<EOF;

$program_name $VER Help ($^O, perl $])

Usage examples:
  $program_name [options]

Command line options:

        --help (or -h)
          Displays this help message.

        --console-log (or -c)
          Enable logging of messages to console.

        --verbose (or -v)
          Enable verbose.

        --debug (or -d)
          Enable debug mode. (insane)

        --quiet (or -q)
          Quiet mode.

        --encoded (or -e)
          Install alienvault-server especial version for encoding.
        
        --feed
          Update packages from feed.

For more info, please visit $web

EOF
exit;
}

sub apt_status() {
    my $LCK=0;
    my $dpk_g=`which dpkg`;$dpk_g=~ s/\n//g;
    while (1) {
        if ( $LCK == 1 ) {
            console_log("Running 'dpkg --configure -a --force-confnew' to correct the problem");
            system("$dpk_g --configure -a --force-confnew");
            last;
        }
        # looking for 'E: dpkg was interrupted, you must manually run 'dpkg --configure -a' to correct the problem.',
        # which can be obtained with simulate too
        my @aptstatus = `apt-get -s -d install ossim-cd-tools 2>&1`;
        if (map(/^E: dpkg was interrupted*/,@aptstatus)) {
            my $MSG=join('\n',@aptstatus);
            console_log("$MSG");
            $LCK=1;
        }else{
            last;
        }
    }
}

sub build_free_repos() {
    verbose_log ("Add free repositories");
    open (my $fh, '>', '/etc/apt/sources.list') || die ("Can't open sources.list: $!");
    print $fh "deb http://data.alienvault.com/alienvault5/mirror/jessie/ jessie main contrib\n";
    print $fh "deb http://data.alienvault.com/alienvault5/mirror/jessie-security/ jessie/updates main contrib\n";
    close $fh;
    open (my $fh, '>', '/etc/apt/sources.list.d/alienvault5.list') || die ("Can't open /etc/apt/sources.list.d/alienvault5.list $!");
    print $fh "deb http://data.alienvault.com/alienvault5/alienvault/ binary/\n";
    print $fh "deb http://data.alienvault.com/alienvault5/feed/ binary/\n";
    print $fh "deb http://data.alienvault.com/alienvault5/plugins-feed/ binary/\n";
    close $fh;
}

sub build_pro_repos() {
    my $key = shift (@_); # Odio perl
    verbose_log ("Add pro repositories");
    open (my $fh, '>', '/etc/apt/sources.list.d/alienvault5-pro.list') || die ("Can't open /etc/apt/sources.list.d/alienvault5.list $!");
    print $fh "deb http://data.alienvault.com/alienvault5/$key  binary/\n";
    print $fh "deb http://data.alienvault.com/alienvault5/feed_$key  binary/\n";
    close $fh;
    open (my $fh, '>',  '/etc/apt/sources.list.d/alienvault5-pro-etpro.list') || die ("Can't open  /etc/apt/sources.list.d/alienvault5-pro $!");
    print $fh "deb http://data.alienvault.com/alienvault5/feed_etpro_$key binary/\n";
    close $fh;
}

sub check_pro() {
    verbose_log("Check for professional version");
    my $ret = 0;
    my $lic = "";
    my $result = system("dpkg -l  alienvault-professional 2> /dev/null");
    if ($result == 0)
    {
        if ( -s "/etc/ossim/ossim.lic")
        {
            my $cfg = Config::IniFiles->new( -file => "/etc/ossim/ossim.lic" );
            # Get the key value
            $key = $cfg->val("appliance", "key");
            if (defined($key))
            {
                # Check for key 
                if (Email::Valid->address ($key))
                {
                    console_log ("Can't update trials");
                    exit -1;
                }
                else
                {
                    $lic = $key;
                    $ret = 1;
                }
            }
            else
            {
                console_log ("Bad license file");
                exit -1;
            }
        }
        else
        {
            console_log ("Can't update unregistered  professional versions");
            exit -1;
        }
         
    }
    else
    {
        $ret = 0;
    }
    
    return ($ret,$lic);
}

sub feed_update() {
    console_log("Updating packages from feed");

    my $script_name = "update_feed.sh";

    if ( -f "$tmppath/$script_name" ) {
        verbose_log("Delete $tmppath/$script_name");
        system("rm -rf $tmppath/$script_name");
    }

    verbose_log("Download $tmppath/$script_name");
    my $status = system("wget -U $wget_useragent -O $tmppath/$script_name $dataserver/alienvault5/RELEASES/$script_name") >> 8;
    if ($status != 0){
        return $ERROR_CANT_DOWNLOAD_FEED_UPDATE;
    }

    if ( -s "$tmppath/$script_name" ) {
        system("wget -U $wget_useragent -O $tmppath/$script_name.sig $dataserver/alienvault5/RELEASES/$script_name.sig");
    if ( -s "$tmppath/$script_name.sig"){
            my $valid_sig = system("gpg --verify --keyring /etc/apt/trusted.gpg $tmppath/$script_name.sig");
        if ($valid_sig != 0) {
            say("Invalid signature for upgrade file $script_name");
            return $ERROR_INVALID_SIGNATURE_FEED;
        }

            verbose_log("Exec: $tmppath/$script_name");
            my $feed_status = system("/bin/bash $tmppath/$script_name") >> 8;
            if ($feed_status != 0){
                console_log("There was an error during feed updates");
                return $feed_status;
            }

    } else {
            say("Signature not available for upgrade file $script_name");
            return $ERROR_UNAVAILABLE_SIGNATURE_FEED;
        }
    }
    console_log("Done.");
    console_log("Finished");
    return 0;
}
