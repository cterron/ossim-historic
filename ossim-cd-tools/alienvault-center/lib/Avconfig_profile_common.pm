#
# License:
#
#  Copyright (c) 2011-2014 AlienVault
#  All rights reserved.
#
#  This package is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; version 2 dated June, 1991.
#  You may not use, modify or distribute this program under any other version
#  of the GNU General Public License.
#
#  This package is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this package; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
#  MA  02110-1301  USA
#
#
#  On Debian GNU/Linux systems, the complete text of the GNU General
#  Public License can be found in `/usr/share/common-licenses/GPL-2'.
#
#  Otherwise you can read it here: http://www.gnu.org/licenses/gpl-2.0.txt
#

package Avconfig_profile_common;

use v5.10;
use strict;
use warnings;
no warnings 'experimental::smartmatch';
#use diagnostics;
use Perl6::Slurp;

use AV::ConfigParser;
use AV::Log;
use AV::Debian::Netifaces;
use Avproxy;
use Config::Tiny;

my $script_msg
    = "# Automatically generated by ossim-reconfig scripts. DO NOT TOUCH!";
my $rclocal_file                = "/etc/rc.local";
my $monit_file                  = "/etc/monit/monitrc";
my $monit_common_file           = "/etc/monit/alienvault/avcommon.monitrc";
my $monitdefault_file           = "/etc/default/monit";
my $motd_file                   = "/etc/motd.tail";
my $issue_file                  = "/etc/issue";
my $sourcelist_file             = "/etc/apt/sources.list";
my $ntpserver_file              = "/etc/cron.hourly/ntpdate";
my $defaultapachecertificate    = "/etc/ssl/certs/ossimweb.pem";
my $defaultapachecertificatekey = "/etc/ssl/private/ossimweb.key";

my $profile_database  = 0;
my $profile_server    = 0;
my $profile_framework = 0;
my $profile_sensor    = 0;

sub config_common($) {

    my $zn = shift;

    my %config      = AV::ConfigParser::current_config;
    my %config_last = AV::ConfigParser::last_config;

    my $server_ip       = $config{'server_ip'};

    my @profiles_arr = map {
        if ($_ eq q{all-in-one}) {
            qw(Sensor Server Database Framework);
        }
        else {
            $_;
        }
    } split( /,\s*/, $config{'profile'} );
    for my $profile (@profiles_arr) {
        given ($profile) {
            when (/Sensor/)    { $profile_sensor    = 1; }
            when (/Server/)    { $profile_server    = 1; }
            when (/Database/)  { $profile_database  = 1; }
            when (/Framework/) { $profile_framework = 1; }
        }
    }

    console_log_line();

    # FIXME: find a better place to declare %reset
    my %reset;

    if ( $zn eq "head" ) {

        # Backup ossim_setup.conf
        if ( -f "/etc/ossim/ossim_setup.conf") {
            console_log("Common Profile: Backup ossim_setup.conf");
            verbose_log("Common Profile: Backup saved to /etc/ossim/.ossim_setup.conf_backup");
            my $command
                = qq{cp -f /etc/ossim/ossim_setup.conf /etc/ossim/.ossim_setup.conf_backup};
            debug_log($command);
            system($command);
            system("chmod 640 /etc/ossim/.ossim_setup.conf_backup");
        }

        #/etc/mailname #2334
        if ( !-f "/etc/mailname" ) {
            #system("hostname -f > /etc/hostname");
            verbose_log("Common Profile: writting /etc/mailname");
            system("hostname -f > /etc/mailname");
        }

        # hostname
        verbose_log("Setting the hostname ($config{'hostname'})");
        if ( "$config{'hostname'}" eq "" ) {
            verbose_log("Hostname empty set $config{'hostname'}");
            $config{'hostname'} = `cat /etc/hostname`;
            $config{'hostname'} =~ s/\n//g;

        }

        verbose_log("echo \"$config{'hostname'}\" > /etc/hostname");
        system("echo \"$config{'hostname'}\" > /etc/hostname");
        system("hostname -F /etc/hostname");

        if ( "$config_last{'hostname'}" eq "" ) {
            $config_last{'hostname'} = $config{'hostname'};

        }

        # hostname change detect
        if ( "$config{'hostname'}" ne "$config_last{'hostname'}" ) {

            verbose_log(
                "Updating the hostname (old=$config_last{'hostname'} new=$config{'hostname'})"
            );
            verbose_log("Updating /etc/hosts");

            my $command
                = "sed -i \"s:.*$config_last{'hostname'}.*:$config{'admin_ip'} $config{'hostname'}.$config{'domain'}  $config{'hostname'}:\" /etc/hosts";
            debug_log("$command");
            system($command);

            system(
                "echo \"$config{'hostname'}.$config{'domain'}\" > /etc/mailname"
            );

            # remove apache cert and key which was built with CN=(old hostname)
            if ( -f $defaultapachecertificate ) {
                my $command = "rm -f $defaultapachecertificate";
                debug_log("$command");
                system($command);
            }
            if ( -f $defaultapachecertificatekey ) {
                my $command = "rm -f $defaultapachecertificatekey";
                debug_log("$command");
                system($command);
            }

        }

        # admin_ip change detect
        if ( $config{'admin_ip'} ne $config_last{'admin_ip'} ) {

            verbose_log("Updating admin ip (old=$config_last{'admin_ip'} new=$config{'admin_ip'})");
            verbose_log("Updating /etc/hosts");
            my $command
                = "sed -i \"s:^$config_last{'admin_ip'}.*:$config{'admin_ip'} $config{'hostname'}.$config{'domain'}  $config{'hostname'}:\" /etc/hosts";
            debug_log("$command");
            system($command);

            if ( $profile_framework == 1 ){
                system("sed -i \"s:framework_ip=.*:framework_ip=$config{'admin_ip'}:\" /etc/ossim/ossim_setup.conf");
            }

            if ( $profile_server == 1 ){
                system("sed -i \"s:server_ip=.*:server_ip=$config{'admin_ip'}:\" /etc/ossim/ossim_setup.conf");
            }

            %config      = AV::ConfigParser::current_config;
	    }


	# proxy update settings

	Avproxy::config_system_proxy;


        system("sed -i 's:^\\^\\?PRUNEPATHS=\\\".*:PRUNEPATHS=\\\"/var/tmp /var/ossim\\\":' /etc/cron.daily/locate");

        my $alienvault_funcions = "/etc/alienvaultfunctions";
        if ( !-f "$alienvault_funcions" ) {

            open FUNC, "> $alienvault_funcions";
            print FUNC <<EOF;
log_daemon_msg () {
        return
}

log_progress_msg () {

        return
}
EOF
            close(FUNC);
        }

        # apt-get disable
        my $profile_file = "/etc/profile";
        verbose_log("Common Profile: Checking aliases");
        open P, "< $profile_file";
        my @profile_content = <P>;
        close(P);

        my $dis_apt      = 0;
        my $dis_dpkg     = 0;
        my $dis_aptitude = 0;

        for my $alias_a (@profile_content) {

            if ( $alias_a =~ /^alias apt-get/ )  { $dis_apt      = 1; }
            if ( $alias_a =~ /^alias aptitude/ ) { $dis_dpkg     = 1; }
            if ( $alias_a =~ /^alias dpkg/ )     { $dis_aptitude = 1; }
        }

        if ( $dis_apt == 0 ) {
            verbose_log("Disabled apt-get");
            system(
                "echo \"alias apt-get='/usr/bin/alienvault_apt-get'\" >> $profile_file"
            );
        }
        if ( $dis_dpkg == 0 ) {
            verbose_log("Disabled aptitude");
            system(
                "echo \"alias aptitude='/usr/bin/alienvault_aptitude'\" >> $profile_file"
            );
        }
        if ( $dis_aptitude == 0 ) {
            verbose_log("Disabled dpkg");
            system(
                "echo \"alias dpkg='/usr/bin/alienvault_dpkg'\" >> $profile_file"
            );
        }

        

        # Monit

        if ( !-f "/etc/monit/mail.conf" ) {
            verbose_log(
                "/etc/monit/mail.conf not found, creating the file...");
            system("> /etc/monit/mail.conf");
        }

        $config{email_notify} ||= 'root@localhost';   # fallback
        my $monit_mail_conf = '/etc/monit/mail.conf';
        my $email_has_changed = system "grep $config{email_notify} $monit_mail_conf";

        if ( $email_has_changed ) {
            $reset{monit} = 1;
            open my $fh, q{>}, $monit_mail_conf
                or warn "Error opening file $!";
            say {$fh} "set alert $config{email_notify}";
        }

        open MONITFILE, "> $monit_file" or die "Error opening file $!";
        print MONITFILE <<EOF;
$script_msg
set daemon 180 with start delay 300
set statefile /tmp/monit.state
set logfile /var/log/ossim/monit.log
#set logfile syslog
include /etc/monit/alienvault/*.monitrc
include /etc/monit/conf.d/*.monitrc
include /etc/monit/mail.conf

# Monit
check file monit.log with path /var/log/ossim/monit.log
		group monit
		start program = "/usr/bin/touch /var/log/ossim/monit.log; chmod 644 /var/log/ossim/monit.log"
EOF
        close(MONITFILE);

        open MONITDEFAULTFILE, "> $monitdefault_file"
            or die "Error opening file $!";
        print MONITDEFAULTFILE <<EOF;
$script_msg
# Fredrik Steen <stone\@debian.org>
startup=1
# CHECK_INTERVALS=180
START=yes
EOF
        close(MONITDEFAULTFILE);


   # monit

    # Custom monit files, and split monit files by service:
    if ( !-d "/etc/monit/conf.d/" || !-d "/etc/monit/alienvault/" ) {
        system("mkdir -p /etc/monit/conf.d/ >/dev/null 2>&1 &");
        system("mkdir -p /etc/monit/alienvault/ >/dev/null 2>&1 &");
    }

        open RCLOCALFILE, "> $rclocal_file" or die "Error opening file $!";
        print RCLOCALFILE <<EOF;
#!/bin/bash
echo deadline > /sys/block/sda/queue/scheduler
EOF
        close(RCLOCALFILE);

        # /etc/issue
        console_log("Common Profile: Updating /etc/issue");

        open ISSUEFILE, "> $issue_file" or die "Error opening issue file $!";


        print ISSUEFILE <<EOF;
[H[2J
=========================================================================
===================== [1;32mhttp://www.alienvault.com [0m ========================
=========================================================================
====[1;37m  Access the AlienVault web interface using the following URL:  [0m=====
             [1;35m            https://$config{'framework_ip'}/[0m
=========================================================================

EOF

if ( -f "/etc/ossim/first_login" ){

    my $pname = `cat /etc/ossim/first_login` ; $pname =~ s/\n//g;
	print ISSUEFILE <<EOF;

AlienVault USM 5.3.6 - \\m - \\l

=========================================================================
== #### First time instructions ####   
== 1. Enter USERNAME:[1;37mroot[0m and PASSWORD:[1;37m$pname[0m to access.
== 2. You will be prompted to change this password in the first run *only*   
== 3. Enjoy!   

EOF
}else{
	print ISSUEFILE <<EOF;

AlienVault USM 5.3.6 - \\m - \\l

EOF
}

close(ISSUEFILE);

        #  motd
        console_log("Common Profile: Updating /etc/motd.tail");
        open MOTDFILE, "> $motd_file" or die "Error opening motd file $!";


print MOTDFILE <<EOF;
[H[2J
[1;32m=========================================================================[0m
[1;32m=========================================================================
[1;32m==[1;37m             _   _                                        _   _     [0m[1;32m ==
[1;32m==[1;37m      __ _  | | (_)   ___   _ __  __   __  __ _   _   _  | | | |_ [0m[1;32m   ==
[1;32m==[1;37m     / _` | | | | |  / _ \\ | '_ \\ \\ \\ / / / _` | | | | | | | | __| [0m[1;32m  ==
[1;32m==[1;37m    | (_| | | | | | |  __/ | | | | \\ V / | (_| | | |_| | | | | |_   [0m[1;32m ==
[1;32m==[1;37m     \\__,_| |_| |_|  \\___| |_| |_|  \\_/   \\__,_|  \\__,_| |_|  \\__|   [0m[1;32m==
[1;32m==[1;37m                                                                    [0m[1;32m ==
[1;32m=========================================================================
[1;32m===================== [1;32mhttp://www.alienvault.com [0m[1;32m ========================
[1;32m=========================================================================[0m
[1;32m====[1;37m  Access the AlienVault web interface using the following URL:  [0m=====[0m
[1;32m             [1;35m            https://$config{'framework_ip'}/[0m
[1;32m=========================================================================[0m

EOF

if ( -f "/etc/ossim/first_login" ){

my $pname = `cat /etc/ossim/first_login` ; $pname =~ s/\n//g;

print MOTDFILE <<EOF;
=========================================================================
== #### First time instructions ####   
== 1. Enter USERNAME:[1;37mroot[0m and PASSWORD:[1;37m$pname[0m to access.
== 2. You will be prompted to change this password in the first run *only*   
== 3. Enjoy!   
==    

EOF

}

close(MOTDFILE);


        my $command = "cp -f /etc/motd.tail /var/run/motd";
        debug_log("$command");
        system($command);

        # source.list
	my $release_version = "alienvault5";
        my $arch;
        if ( $zn eq "head" ) {
            console_log("Common Profile: Updating repositories");
            dp("Updating repositories");

            # amd64 or x86_64 ?
            chomp(my $uname_m = `uname -m`);
            my $is_64bits = ( $uname_m =~ m{^x86_64} );

            if ( $is_64bits ) {

                #64bits
                $arch = "64bits";  # Cap'n Obvious strikes again!

                if ( "$config{'first_init'}" eq "yes" ) {
		debug_log("FIRST INIT: common profile");
                    system(
                        "echo \"deb http://data.alienvault.com/$release_version/alienvault/ binary/\" > /etc/apt/sources.list.d/$release_version.list"
                    );
                    system(
                        "echo \"deb http://data.alienvault.com/feed/ binary/\" >> /etc/apt/sources.list.d/$release_version.list"
                    );
                    system(
                        "echo \"deb http://data.alienvault.com/plugins-feed/ binary/\" >> /etc/apt/sources.list.d/$release_version.list"
                    );

                    if ( "$config{'server_pro'}" eq "yes" ) {

                        system(
                            "echo \"deb http://data.alienvault.com/$config{'server_license'}/ binary/\" > /etc/apt/sources.list.d/$release_version-pro.list"
                        );
                        system(
                            "echo \"deb http://data.alienvault.com/feed_$config{'server_license'}/ binary/\" >> /etc/apt/sources.list.d/$release_version-pro.list"
                        );
                    }
                }

            }

            open( OSARCH, ">/etc/ossim/.arch" )
                || warning("Cannot Open File /etc/ossim/.arch");
            print OSARCH "$arch\n";
            close(OSARCH);
        }

        if ( "$config{'first_init'}" eq "yes" ) {
            open SOURCELISTFILE, "> $sourcelist_file"
                or die "Error opening file $!";

            print SOURCELISTFILE
                "deb http://data.alienvault.com/alienvault5/mirror/jessie/ jessie main contrib\n";

            print SOURCELISTFILE
                "deb http://data.alienvault.com/alienvault5/mirror/jessie-security/ jessie/updates main contrib\n";

            close(SOURCELISTFILE);


            if ( "$config{upgrade}" eq "yes" ) {
                console_log("Update apt key");
                my $apt_key = `apt-key update 2>/dev/null`;
                debug_log("$apt_key");
                console_log("update apt");
                my $apt_update = `apt-get update`;
                debug_log("$apt_update");
            }
            else {
                console_log("Skip upgrade");
            }
        }

        ## snmp
        if ( $config{'snmpd'} eq "yes" ) {
            my $snmpcfg_file = q{/etc/snmp/snmpd.conf};
            verbose_log("Updating $snmpcfg_file");
            open SNMPDFILE, "> $snmpcfg_file"
                or console_log(
                "Error opening file: $snmpcfg_file, snmp not configured"
                );
            print SNMPDFILE "$script_msg\n";
            print SNMPDFILE
                "com2sec tconly  default $config{'snmp_comunity'}\n\n";
            print SNMPDFILE "group MyOssim v1 tconly\n";
            print SNMPDFILE "group MyOssim v2c tconly\n";
            print SNMPDFILE "group MyOssim usm tconly\n\n";

            print SNMPDFILE
                "view all    included  .1                               80\n";
            print SNMPDFILE "view system included  .1.3.6.1.2.1.1\n";

            print SNMPDFILE
                "access MyOssim \"\"      any       noauth    exact  all    none   none\n";

            my $snmp_script;  # I'm going to hell...  See FIXME above
            if ( -f "$snmp_script" ) {
                print SNMPDFILE
                    "pass .1.3.6.1.4.1.2021.55 $snmp_script sapristy\n";
            }
            print SNMPDFILE "view tcontrol included   .1.3.6.1.4.1.2021.55\n";
            close(SNMPDFILE);

            my $snmpdefault_file = q{/etc/default/snmpd};
            open SNMPDDEFAULTFILE, "> $snmpdefault_file"
                or console_log(
                "Error opening file: $snmpdefault_file, snmp not configured"
                );
            print SNMPDDEFAULTFILE
                "$script_msg\nexport MIBDIRS=/usr/share/snmp/mibs\n";
            print SNMPDDEFAULTFILE "SNMPDRUN=yes\n";
            print SNMPDDEFAULTFILE
                "SNMPDOPTS='-Lsd -Lf /dev/null -u snmp -I -smux -p /var/run/snmpd.pid'\n";
            if ( $config{'snmptrap'} eq "yes" ) {
                console_log("Enable snmptrap");
                print SNMPDDEFAULTFILE "TRAPDRUN=yes\n";
            }
            else {
                print SNMPDDEFAULTFILE "TRAPDRUN=no\n";

            }
            print SNMPDDEFAULTFILE
                "TRAPDOPTS='-Lsd -p /var/run/snmptrapd.pid -Oa -n'\n";
            print SNMPDDEFAULTFILE "SNMPDCOMPAT=yes\n";
            close(SNMPDDEFAULTFILE);

            # snmptrapd

            my $snmptrapcfg_file = q{/etc/snmp/snmptrapd.conf};
            open SNMPTRAPTFILE, ">  $snmptrapcfg_file"
                or console_log(
                "Error opening file: $snmptrapcfg_file, snmptrap not configured"
                );
            print SNMPTRAPTFILE "$script_msg\n";
            print SNMPTRAPTFILE
                "authCommunity log $config{'snmp_comunity'}\n";
            if ( -f "/usr/sbin/snmptrapfmthdlr" ) {
                print SNMPTRAPTFILE
                    "traphandle default /usr/sbin/snmptrapfmthdlr\n";

            }
            print SNMPTRAPTFILE "\n";
            close(SNMPTRAPTFILE);

            # Remember reset
            $reset{'snmpd'} = 1;
        }
        else {
            verbose_log("Skipping /etc/snmp/snmpd.conf");
        }

        ## bashrc -- a.r.
        my $bashrc_file = q{/root/.bashrc};
        if ( -f $bashrc_file ) {
            verbose_log("Updating bashrc");
            open BASHRCFILE, "> $bashrc_file"
                or die "Error opening file: /root/.bashrc";
            print BASHRCFILE "$script_msg\n";
            print BASHRCFILE
                "# ~/.bashrc: executed by bash(1) for non-login shells.\n";
            print BASHRCFILE "if [ \"\$jailbreak\" != \"yes\" ];then\n";
            print BASHRCFILE "if [[ \$- =~ \"i\" ]];then\n";
            print BASHRCFILE "ossim-setup\n";
            print BASHRCFILE "exit\n";
            print BASHRCFILE "fi\n";
            print BASHRCFILE "fi\n";
            print BASHRCFILE "export PS1='\\h:\\w\\\$ '\n";
            print BASHRCFILE "umask 022\n";
            print BASHRCFILE "export LS_OPTIONS='--color=auto'\n";
            print BASHRCFILE "eval \"`dircolors`\"\n";
            print BASHRCFILE "alias ls='ls \$LS_OPTIONS'\n";
            print BASHRCFILE "alias ll='ls \$LS_OPTIONS -l'\n";
            print BASHRCFILE "alias l='ls \$LS_OPTIONS -lA'\n";
            print BASHRCFILE "alias du='du -kh'\n";
            print BASHRCFILE "alias df='df -kTh'\n";
            print BASHRCFILE "alias grep='grep --color=auto'\n";
            print BASHRCFILE "alias egrep='egrep --color=auto'\n";
            print BASHRCFILE "alias fgrep='fgrep --color=auto'\n";
            print BASHRCFILE "alias rgrep='rgrep --color=auto'\n";
            print BASHRCFILE "export LC_ALL='C'\n";
            print BASHRCFILE "export HISTTIMEFORMAT='%F %T '\n";
            close(BASHRCFILE);
        }

        # 94 Mail too long (crontab)
        $command
            = "sed -i \"s:\\\&\\\& run-parts --report /etc/cron.hourly.*:\\\&\\\& run-parts --report /etc/cron.hourly >/dev/null 2>\\\&1:\" /etc/crontab";
        verbose_log(
            "updating crontab (cron.hourly: send out and err to devnull)");
        debug_log("$command");
        system($command);

        #1102
        $command
            = "sed -i \"s:^17\\\(.*root.*run-parts --report /etc/cron.hourly.*\\\):01\\1:\" /etc/crontab";
        verbose_log(
            "updating crontab (cron.hourly: run at one minute past of every hour)"
        );
        debug_log("$command");
        system($command);


        # Fix 1506
        my $sysstatfile = "/etc/default/sysstat";
        $command
            = "echo sysstat sysstat/enable boolean true | debconf-set-selections";
        debug_log("$command");
        system($command);

        if ( -f $sysstatfile ) {
            my $command
                = "sed -i \"s:ENABLED=.*:ENABLED=\\\"true\\\":\" $sysstatfile";
            debug_log("$command");
            system($command);
        }

        # Fix: 1750
        # /etc/ossim/agent/host_cache.dic
        if ( -f "/etc/ossim/agent/host_cache.dic" ) {
            system("chmod 644 /etc/ossim/agent/host_cache.dic");
        }

        # /var/log/ossim/*.log
        system("chmod 644 /var/log/ossim/*");

        # old names; remove them
        my $ha_logrotate      = "/etc/logrotate.d/ossim-ha";
        my $ha_logrotate_dupe = "/etc/logrotate.d/ossim_ha-rsync";
        if ( ( -f $ha_logrotate_dupe ) && ( -f $ha_logrotate ) ) {
            unlink($ha_logrotate_dupe);
        }

        if ( -f "/etc/cron.hourly/ha-rsync" ) {
            unlink("/etc/cron.hourly/ha-rsync");
        }


        # Fix: #794
        my $mrtgcron_file = "/etc/cron.d/mrtg";
        if ( -e $mrtgcron_file ) { unlink($mrtgcron_file); }

        # 243 add ntp server

        # 1247 (filename without extension is required in 'run-parts')

        if ( $config{'ntp_server'} ne "no" ) {
            if ( -f "/usr/sbin/ntpdate" ) {
                verbose_log(
                    "Configuring Ntp server syncronization in cron.hourly (filename: ntpdate)"
                );
                open NTPSERVER, "> $ntpserver_file";
                print NTPSERVER "#!/bin/bash\n";
                print NTPSERVER "$script_msg\n\n";
                print NTPSERVER "ntpdate -s $config{'ntp_server'} \n";

                close(NTPSERVER);
                system("chmod +x $ntpserver_file");
            }
            else {
                verbose_log("ntpdate not found!!");
            }
        }
        else {

            if ( -f "$ntpserver_file" ) { system("rm $ntpserver_file"); }
        }



    }

    # end headers

    if ( $zn eq "foother" ) {

        # monit

        open MONITFILE, ">> $monit_file" or die "Error opening file $!";
        print MONITFILE <<EOF;
#System
include /etc/monit/monit-system
# Networking
include /etc/monit/monit-networking
# Custom monit conf
# Create a file in /etc/monit/conf.d/YOURFILE.monitrc with your custom
# commands, then run ossim-reconfig to get it included like this:
# include /etc/monit/conf.d/YOURFILE.monitrc

EOF
        close(MONITFILE);


    	console_log("Common Profile: Setting permissions for /var/log/ossim/*.log");
    	my $command="chmod u-x,g-x,o-x,o-w /var/log/ossim/*.log";
    	debug_log("$command");
    	system($command);

        #### TRIGGER HANDLING ######################################################

        my $ConfigFile = Config::Tiny->read('/etc/ossim/ossim_setup.conf');
        my $OldConfigFile = Config::Tiny->read('/etc/ossim/ossim_setup.conf_last');
        my @trigger_list = ();


	if ( exists $ConfigFile->{_}->{admin_dns} and $ConfigFile->{_}->{admin_dns} ne $OldConfigFile->{_}->{admin_dns} ) {
		push(@trigger_list, 'alienvault-config-system-admin-dns');
	}
	if ( exists $ConfigFile->{_}->{admin_gateway} and $ConfigFile->{_}->{admin_gateway} ne $OldConfigFile->{_}->{admin_gateway} ) {
		push(@trigger_list, 'alienvault-config-system-admin-gateway');
	}
	if ( exists $ConfigFile->{_}->{admin_ip} and $ConfigFile->{_}->{admin_ip} ne $OldConfigFile->{_}->{admin_ip} ) {
		push(@trigger_list, 'alienvault-config-system-admin-ip');
	}
	if ( exists $ConfigFile->{_}->{admin_netmask} and $ConfigFile->{_}->{admin_netmask} ne $OldConfigFile->{_}->{admin_netmask} ) {
		push(@trigger_list, 'alienvault-config-system-admin-netmask');
	}
	if ( exists $ConfigFile->{_}->{domain} and $ConfigFile->{_}->{domain} ne $OldConfigFile->{_}->{domain} ) {
		push(@trigger_list, 'alienvault-config-system-domain');
	}
	if ( exists $ConfigFile->{_}->{email_notify} and $ConfigFile->{_}->{email_notify} ne $OldConfigFile->{_}->{email_notify} ) {
		push(@trigger_list, 'alienvault-config-system-email-notify');
	}
	if ( exists $ConfigFile->{_}->{hostname} and $ConfigFile->{_}->{hostname} ne $OldConfigFile->{_}->{hostname} ) {
		push(@trigger_list, 'alienvault-config-system-hostname');
	}
	if ( exists $ConfigFile->{_}->{interface} and $ConfigFile->{_}->{interface} ne $OldConfigFile->{_}->{interface} ) {
		push(@trigger_list, 'alienvault-config-system-interface');
	}
	if ( exists $ConfigFile->{_}->{mailserver_relay} and $ConfigFile->{_}->{mailserver_relay} ne $OldConfigFile->{_}->{mailserver_relay} ) {
		push(@trigger_list, 'alienvault-config-system-mailserver-relay');
	}
	if ( exists $ConfigFile->{_}->{mailserver_relay_passwd} and $ConfigFile->{_}->{mailserver_relay_passwd} ne $OldConfigFile->{_}->{mailserver_relay_passwd} ) {
		push(@trigger_list, 'alienvault-config-system-mailserver-relay-passwd');
	}
	if ( exists $ConfigFile->{_}->{mailserver_relay_port} and $ConfigFile->{_}->{mailserver_relay_port} ne $OldConfigFile->{_}->{mailserver_relay_port} ) {
		push(@trigger_list, 'alienvault-config-system-mailserver-relay-port');
	}
	if ( exists $ConfigFile->{_}->{mailserver_relay_user} and $ConfigFile->{_}->{mailserver_relay_user} ne $OldConfigFile->{_}->{mailserver_relay_user} ) {
		push(@trigger_list, 'alienvault-config-system-mailserver-relay-user');
	}
	if ( exists $ConfigFile->{_}->{mailserver_relay_user} and $ConfigFile->{_}->{mailserver_relay_user} ne $OldConfigFile->{_}->{mailserver_relay_user} ) {
		push(@trigger_list, 'alienvault-config-system-mailserver-relay-user');
	}
	if ( exists $ConfigFile->{_}->{ntp_server} and $ConfigFile->{_}->{ntp_server} ne $OldConfigFile->{_}->{ntp_server} ) {
		push(@trigger_list, 'alienvault-config-system-ntp-server');
	}
	if ( exists $ConfigFile->{_}->{profile} and $ConfigFile->{_}->{profile} ne $OldConfigFile->{_}->{profile} ) {
		push(@trigger_list, 'alienvault-config-system-profile');
	}

	if ( exists $ConfigFile->{database}->{db_ip} and $ConfigFile->{database}->{db_ip} ne $OldConfigFile->{database}->{db_ip} ) {
		push(@trigger_list, 'alienvault-config-database-db-ip');
	}
	if ( exists $ConfigFile->{database}->{pass} and $ConfigFile->{database}->{pass} ne $OldConfigFile->{database}->{pass} ) {
		push(@trigger_list, 'alienvault-config-database-pass');
	}
	if ( exists $ConfigFile->{database}->{user} and $ConfigFile->{database}->{user} ne $OldConfigFile->{database}->{user} ) {
		push(@trigger_list, 'alienvault-config-database-user');
	}

	if ( exists $ConfigFile->{firewall}->{active} and $ConfigFile->{firewall}->{active} ne $OldConfigFile->{firewall}->{active} ) {
		push(@trigger_list, 'alienvault-config-firewall-active');
	}

	if ( exists $ConfigFile->{framework}->{framework_https_cert} and $ConfigFile->{framework}->{framework_https_cert} ne $OldConfigFile->{framework}->{framework_https_cert} ) {
		push(@trigger_list, 'alienvault-config-framework-framework-https-cert');
	}
	if ( exists $ConfigFile->{framework}->{framework_https_key} and $ConfigFile->{framework}->{framework_https_key} ne $OldConfigFile->{framework}->{framework_https_key} ) {
		push(@trigger_list, 'alienvault-config-framework-framework-https-key');
	}
	if ( exists $ConfigFile->{framework}->{framework_ip} and $ConfigFile->{framework}->{framework_ip} ne $OldConfigFile->{framework}->{framework_ip} ) {
		push(@trigger_list, 'alienvault-config-framework-framework-ip');
	}

	if ( exists $ConfigFile->{ha}->{ha_autofailback} and $ConfigFile->{ha}->{ha_autofailback} ne $OldConfigFile->{ha}->{ha_autofailback} ) {
		push(@trigger_list, 'alienvault-config-ha-ha-autofailback');
	}
	if ( exists $ConfigFile->{ha}->{ha_deadtime} and $ConfigFile->{ha}->{ha_deadtime} ne $OldConfigFile->{ha}->{ha_deadtime} ) {
		push(@trigger_list, 'alienvault-config-ha-ha-deadtime');
	}
	if ( exists $ConfigFile->{ha}->{ha_device} and $ConfigFile->{ha}->{ha_device} ne $OldConfigFile->{ha}->{ha_device} ) {
		push(@trigger_list, 'alienvault-config-ha-ha-device');
	}
	if ( exists $ConfigFile->{ha}->{ha_heartbeat_comm} and $ConfigFile->{ha}->{ha_heartbeat_comm} ne $OldConfigFile->{ha}->{ha_heartbeat_comm} ) {
		push(@trigger_list, 'alienvault-config-ha-ha-heartbeat-comm');
	}
	if ( exists $ConfigFile->{ha}->{ha_heartbeat_start} and $ConfigFile->{ha}->{ha_heartbeat_start} ne $OldConfigFile->{ha}->{ha_heartbeat_start} ) {
		push(@trigger_list, 'alienvault-config-ha-ha-heartbeat-start');
	}
	if ( exists $ConfigFile->{ha}->{ha_keepalive} and $ConfigFile->{ha}->{ha_keepalive} ne $OldConfigFile->{ha}->{ha_keepalive} ) {
		push(@trigger_list, 'alienvault-config-ha-ha-keepalive');
	}
	if ( exists $ConfigFile->{ha}->{ha_local_node_ip} and $ConfigFile->{ha}->{ha_local_node_ip} ne $OldConfigFile->{ha}->{ha_local_node_ip} ) {
		push(@trigger_list, 'alienvault-config-ha-ha-local-node-ip');
	}
	if ( exists $ConfigFile->{ha}->{ha_log} and $ConfigFile->{ha}->{ha_log} ne $OldConfigFile->{ha}->{ha_log} ) {
		push(@trigger_list, 'alienvault-config-ha-ha-log');
	}
	if ( exists $ConfigFile->{ha}->{ha_other_node_ip} and $ConfigFile->{ha}->{ha_other_node_ip} ne $OldConfigFile->{ha}->{ha_other_node_ip} ) {
		push(@trigger_list, 'alienvault-config-ha-ha-other-node-ip');
	}
	if ( exists $ConfigFile->{ha}->{ha_other_node_name} and $ConfigFile->{ha}->{ha_other_node_name} ne $OldConfigFile->{ha}->{ha_other_node_name} ) {
		push(@trigger_list, 'alienvault-config-ha-ha-other-node-name');
	}
	if ( exists $ConfigFile->{ha}->{ha_password} and $ConfigFile->{ha}->{ha_password} ne $OldConfigFile->{ha}->{ha_password} ) {
		push(@trigger_list, 'alienvault-config-ha-ha-password');
	}
	if ( exists $ConfigFile->{ha}->{ha_ping_node} and $ConfigFile->{ha}->{ha_ping_node} ne $OldConfigFile->{ha}->{ha_ping_node} ) {
		push(@trigger_list, 'alienvault-config-ha-ha-ping-node');
	}
	if ( exists $ConfigFile->{ha}->{ha_role} and $ConfigFile->{ha}->{ha_role} ne $OldConfigFile->{ha}->{ha_role} ) {
		push(@trigger_list, 'alienvault-config-ha-ha-role');
	}
	if ( exists $ConfigFile->{ha}->{ha_virtual_ip} and $ConfigFile->{ha}->{ha_virtual_ip} ne $OldConfigFile->{ha}->{ha_virtual_ip} ) {
		push(@trigger_list, 'alienvault-config-ha-ha-virtual-ip');
	}

	if ( exists $ConfigFile->{sensor}->{asec} and $ConfigFile->{sensor}->{asec} ne $OldConfigFile->{sensor}->{asec} ) {
		push(@trigger_list, 'alienvault-config-sensor-asec');
	}
	if ( exists $ConfigFile->{sensor}->{detectors} and $ConfigFile->{sensor}->{detectors} ne $OldConfigFile->{sensor}->{detectors} ) {
		push(@trigger_list, 'alienvault-config-sensor-detectors');
	}
	if ( exists $ConfigFile->{sensor}->{ids_rules_flow_control} and $ConfigFile->{sensor}->{ids_rules_flow_control} ne $OldConfigFile->{sensor}->{ids_rules_flow_control} ) {
		push(@trigger_list, 'alienvault-config-sensor-ids-rules-flow-control');
	}
	if ( exists $ConfigFile->{sensor}->{interfaces} and $ConfigFile->{sensor}->{interfaces} ne $OldConfigFile->{sensor}->{interfaces} ) {
		push(@trigger_list, 'alienvault-config-sensor-interfaces');
	}
	if ( exists $ConfigFile->{sensor}->{ip} and $ConfigFile->{sensor}->{ip} ne $OldConfigFile->{sensor}->{ip} ) {
		push(@trigger_list, 'alienvault-config-sensor-ip');
	}
	if ( exists $ConfigFile->{sensor}->{monitors} and $ConfigFile->{sensor}->{monitors} ne $OldConfigFile->{sensor}->{monitors} ) {
		push(@trigger_list, 'alienvault-config-sensor-monitors');
	}
	if ( exists $ConfigFile->{sensor}->{mservers} and $ConfigFile->{sensor}->{mservers} ne $OldConfigFile->{sensor}->{mservers} ) {
		push(@trigger_list, 'alienvault-config-sensor-mservers');
	}
	if ( exists $ConfigFile->{sensor}->{name} and $ConfigFile->{sensor}->{name} ne $OldConfigFile->{sensor}->{name} ) {
		push(@trigger_list, 'alienvault-config-sensor-name');
	}
	if ( exists $ConfigFile->{sensor}->{netflow} and $ConfigFile->{sensor}->{netflow} ne $OldConfigFile->{sensor}->{netflow} ) {
		push(@trigger_list, 'alienvault-config-sensor-netflow');
	}
	if ( exists $ConfigFile->{sensor}->{netflow_remote_collector_port} and $ConfigFile->{sensor}->{netflow_remote_collector_port} ne $OldConfigFile->{sensor}->{netflow_remote_collector_port} ) {
		push(@trigger_list, 'alienvault-config-sensor-netflow-remote-collector-port');
	}
	if ( exists $ConfigFile->{sensor}->{networks} and $ConfigFile->{sensor}->{networks} ne $OldConfigFile->{sensor}->{networks} ) {
		push(@trigger_list, 'alienvault-config-sensor-networks');
	}
	if ( exists $ConfigFile->{sensor}->{sensor_ctx} and $ConfigFile->{sensor}->{sensor_ctx} ne $OldConfigFile->{sensor}->{sensor_ctx} ) {
		push(@trigger_list, 'alienvault-config-sensor-ctx');
	}
	if ( exists $ConfigFile->{sensor}->{tzone} and $ConfigFile->{sensor}->{tzone} ne $OldConfigFile->{sensor}->{tzone} ) {
		push(@trigger_list, 'alienvault-config-sensor-tzone');
	}

	if ( exists $ConfigFile->{server}->{alienvault_ip_reputation} and $ConfigFile->{server}->{alienvault_ip_reputation} ne $OldConfigFile->{server}->{alienvault_ip_reputation} ) {
		push(@trigger_list, 'alienvault-config-server-alienvault-ip-reputation');
	}
	if ( exists $ConfigFile->{server}->{idm_mssp} and $ConfigFile->{server}->{idm_mssp} ne $OldConfigFile->{server}->{idm_mssp} ) {
		push(@trigger_list, 'alienvault-config-server-idm-mssp');
	}
	if ( exists $ConfigFile->{server}->{rservers} and $ConfigFile->{server}->{rservers} ne $OldConfigFile->{server}->{rservers} ) {
		push(@trigger_list, 'alienvault-config-server-rservers');
	}
	if ( exists $ConfigFile->{server}->{server_ip} and $ConfigFile->{server}->{server_ip} ne $OldConfigFile->{server}->{server_ip} ) {
		push(@trigger_list, 'alienvault-config-server-server-ip');
	}
	if ( exists $ConfigFile->{server}->{server_plugins} and $ConfigFile->{server}->{server_plugins} ne $OldConfigFile->{server}->{server_plugins} ) {
		push(@trigger_list, 'alienvault-config-server-server-plugins');
	}
	if ( exists $ConfigFile->{server}->{server_pro} and $ConfigFile->{server}->{server_pro} ne $OldConfigFile->{server}->{server_pro} ) {
		push(@trigger_list, 'alienvault-config-server-server-pro');
	}

	if ( exists $ConfigFile->{snmp}->{community} and $ConfigFile->{snmp}->{community} ne $OldConfigFile->{snmp}->{community} ) {
		push(@trigger_list, 'alienvault-config-snmp-community');
	}
	# FIXME: typo in comunity 
	if ( exists $ConfigFile->{snmp}->{snmp_comunity} and $ConfigFile->{snmp}->{snmp_comunity} ne $OldConfigFile->{snmp}->{snmp_comunity} ) {
		push(@trigger_list, 'alienvault-config-snmp-snmp-comunity');
	}
	if ( exists $ConfigFile->{snmp}->{snmpd} and $ConfigFile->{snmp}->{snmpd} ne $OldConfigFile->{snmp}->{snmpd} ) {
		push(@trigger_list, 'alienvault-config-snmp-snmpd');
	}
	if ( exists $ConfigFile->{snmp}->{snmptrap} and $ConfigFile->{snmp}->{snmptrap} ne $OldConfigFile->{snmp}->{snmptrap} ) {
		push(@trigger_list, 'alienvault-config-snmp-snmptrap');
	}

	if ( exists $ConfigFile->{update}->{update_proxy} and $ConfigFile->{update}->{update_proxy} ne $OldConfigFile->{update}->{update_proxy} ) {
		push(@trigger_list, 'alienvault-config-update-update-proxy');
	}
	if ( exists $ConfigFile->{update}->{update_proxy_dns} and $ConfigFile->{update}->{update_proxy_dns} ne $OldConfigFile->{update}->{update_proxy_dns} ) {
		push(@trigger_list, 'alienvault-config-update-update-proxy-dns');
	}
	if ( exists $ConfigFile->{update}->{update_proxy_pass} and $ConfigFile->{update}->{update_proxy_pass} ne $OldConfigFile->{update}->{update_proxy_pass} ) {
		push(@trigger_list, 'alienvault-config-update-update-proxy-pass');
	}
	if ( exists $ConfigFile->{update}->{update_proxy_port} and $ConfigFile->{update}->{update_proxy_port} ne $OldConfigFile->{update}->{update_proxy_port} ) {
		push(@trigger_list, 'alienvault-config-update-update-proxy-port');
	}
	if ( exists $ConfigFile->{update}->{update_proxy_user} and $ConfigFile->{update}->{update_proxy_user} ne $OldConfigFile->{update}->{update_proxy_user} ) {
		push(@trigger_list, 'alienvault-config-update-update-proxy-user');
	}

	if ( exists $ConfigFile->{vpn}->{vpn_infraestructure} and $ConfigFile->{vpn}->{vpn_infraestructure} ne $OldConfigFile->{vpn}->{vpn_infraestructure} ) {
		push(@trigger_list, 'alienvault-config-vpn-vpn-infraestructure');
	}
	if ( exists $ConfigFile->{vpn}->{vpn_net} and $ConfigFile->{vpn}->{vpn_net} ne $OldConfigFile->{vpn}->{vpn_net} ) {
		push(@trigger_list, 'alienvault-config-vpn-vpn-net');
	}
	if ( exists $ConfigFile->{vpn}->{vpn_netmask} and $ConfigFile->{vpn}->{vpn_netmask} ne $OldConfigFile->{vpn}->{vpn_netmask} ) {
		push(@trigger_list, 'alienvault-config-vpn-vpn-netmask');
	}
	if ( exists $ConfigFile->{vpn}->{vpn_port} and $ConfigFile->{vpn}->{vpn_port} ne $OldConfigFile->{vpn}->{vpn_port} ) {
		push(@trigger_list, 'alienvault-config-vpn-vpn-port');
	}

        # FIXME: if firewall_include is not changed firewall should not be
        #        reloaded, improve this by having a .last file and comparing it 
        push(@trigger_list, 'alienvault-restart-firewall');

        foreach my $trigger (@trigger_list) {
	    console_log("Common Profile: triggering for $trigger");
            system("dpkg-trigger --no-await $trigger");
        }
        system("dpkg --configure --pending");

        #### TRIGGER HANDLING ######################################################

        console_log("Common Profile: Update ossim_setup.conf_last");
        $command="cp /etc/ossim/ossim_setup.conf /etc/ossim/ossim_setup.conf_last";
        debug_log("$command");
        system($command);

    	console_log("Common Profile: Setting permissions for /etc/ossim/ossim_setup.conf*");
    	$command="chmod o-rwx /etc/ossim/ossim_setup.conf*";
    	debug_log("$command");
    	system($command);


    }    # end foother

    return %reset;

}

1;
